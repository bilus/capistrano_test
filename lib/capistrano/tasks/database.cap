namespace :database do
  namespace :postgresql do
    def privileged_on(*args, &block)
      on(*args) do |host|
        if host.nil?
          instance_exec(nil, nil, &block)
        else
          original_user = host.user

          begin
            host.user = host.properties.privileged_user ||
                        fetch(:fiftyfive_privileged_user)
            instance_exec(host, original_user, &block)
          ensure
            host.user = original_user
          end
        end
      end
    end
    
    def create_user
      privileged_on primary(:db) do
        user = fetch(:postgresql_user)

        unless test("sudo -u postgres psql -c '\\du' | grep -q #{user}")
          passwd = fetch(:postgresql_password)
          md5 = Digest::MD5.hexdigest(passwd + user)
          execute "sudo -u postgres psql -c " +
                  %Q["CREATE USER #{user} PASSWORD 'md5#{md5}';"]
        end
      end
    end
    
    def generate_database_yml
      on roles(:db) do
        puts "Overwriting database.yml"
        smart_template "database.yml"
      end
    end
    
    def create_database
      privileged_on primary(:db) do
        user = fetch(:postgresql_user)
        db = fetch(:postgresql_database)

        unless test("sudo -u postgres psql -l | grep -w -q #{db}")
          execute "sudo -u postgres createdb -O #{user} #{db}"
        end
      end
    end
    
    
    task :initialize_database do
      set :postgresql_database, "#{fetch(:full_app_name)}_production"
      set :postgresql_user, "#{fetch(:full_app_name)}_production_rw"
      set :postgresql_password, SecureRandom.hex
      set :postgresql_host, "localhost"
      set :postgresql_pool_size, 5

      generate_database_yml
      create_user
      create_database
    end
  end
end